<?php

namespace App\Http\Sections;

use App\Cart;
use Illuminate\Database\Eloquent\Model;
use SleepingOwl\Admin\Section;
use SleepingOwl\Admin\Contracts\Initializable;
use SleepingOwl\Admin\Contracts\Form\FormInterface;
use SleepingOwl\Admin\Contracts\Display\DisplayInterface;

/**
 * Class Carts
 *
 * @property \App\Cart $model
 *
 * @see https://sleepingowladmin.ru/#/ru/model_configuration_section
 */
class Carts extends Section implements Initializable
{
    /**
     * @see http://sleepingowladmin.ru/docs/model_configuration#ограничение-прав-доступа
     *
     * @var bool
     */
    protected $checkAccess = false;

    /**
     * @var string
     */
    protected $title = 'Корзина';

    /**
     * @var string
     */
    protected $alias;

    /**
     * Initialize class.
     */
    public function initialize()
    {
        $this->addToNavigation()->setPriority(100)->setIcon('fa fa-cart-o');
    }

    /**
     * @param array $payload
     *
     * @return DisplayInterface
     */
    public function onDisplay($payload = [])
    {
//        dd($this->getModel()->id);
        return \AdminDisplay::datatablesAsync()
            ->setHtmlAttribute('class', 'table-primary')
            ->setColumns(
//                \AdminColumn::text('id', '#')->setWidth('30px'),
                \AdminColumn::text('name', 'Name')
            )
            ->setOrder([1, 'ASC'])
            ->paginate(20)
        ;
    }

    function getName($id)
    {
        return 'Корзина ресторана №';
    }

    /**
     * @param int|null $id
     * @param array $payload
     *
     * @return FormInterface
     */
    public function onEdit($id = null, $payload = [])
    {
        $form = \AdminForm::panel()
            ->addBody([
                    \AdminFormElement::columns()
                        ->addColumn([
                            \AdminFormElement::text('name', 'Название')->required()->setHtmlAttribute('maxlength','35'),
                        ], 12)
                        ->addColumn([
                            \AdminFormElement::image('image', 'Изображение')->required(),
                        ], 12)
                ]
            );
        return $form;
    }

    /**
     * @return FormInterface
     */
    public function onCreate($payload = [])
    {
        return $this->onEdit(null, $payload);
    }

    public function isCreatable()
    {
        if (Cart::getCount() >= 2) {
            return false;
        }
        return parent::isCreatable(); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     */
    public function isDeletable(Model $model)
    {
        return false;
    }
}
